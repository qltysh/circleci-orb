#!/bin/bash

if [ "$PARAM_SKIP_ERRORS" != "true" ]; then
  set -e
fi

QLTY_CMD="$HOME/.qlty/bin/qlty"

params=()

# Function to add parameters
add_param() {
  local param_name=$1
  local param_value=$2
  if [[ -n $param_value ]]; then
    params+=("$param_name")
    params+=("$param_value")
  fi
}

# Adding parameters if they are set
add_param "--tag" "$PARAM_TAG"
add_param "--strip-prefix" "$PARAM_STRIP_PREFIX"
add_param "--add-prefix" "$PARAM_ADD_PREFIX"
add_param "--total-parts-count" "$PARAM_TOTAL_PARTS_COUNT"
add_param "--format" "$PARAM_FORMAT"

if $PARAM_VERBOSE; then
  params+=("--verbose")
fi

if $PARAM_SKIP_MISSING_FILES; then
  params+=("--skip-missing-files")
fi

if $PARAM_DRY_RUN; then
  params+=("--dry-run")
fi

if $PARAM_INCOMPLETE; then
  params+=("--incomplete")
fi

if [[ -n $PARAM_NAME ]]; then
  params+=("--name")
  params+=("$PARAM_NAME")
fi

if $PARAM_VALIDATE; then
  params+=("--validate")
  
  if [[ -n $PARAM_VALIDATE_FILE_THRESHOLD ]]; then
    params+=("--validate-file-threshold")
    params+=("$PARAM_VALIDATE_FILE_THRESHOLD")
  fi
fi

if [[ -n $PARAM_TOKEN && $PARAM_TOKEN != "QLTY_COVERAGE_TOKEN" ]]; then
  TOKEN_VALUE="${!PARAM_TOKEN}"
  params+=("--token")
  params+=("$TOKEN_VALUE")
fi

# Expand PARAM_WORKING_DIRECTORY and change to it
WORKING_DIRECTORY="${PARAM_WORKING_DIRECTORY/#\~/$HOME}"
cd "$WORKING_DIRECTORY" || exit

# Build the command
if [[ -n $PARAM_FILES ]]; then
  # Split PARAM_FILES by commas, trim whitespace, and filter empty values
  IFS=',' read -r -a files_array <<< "$PARAM_FILES"
  cleaned_files=()
  for file in "${files_array[@]}"; do
    trimmed_file=$(echo "$file" | xargs) # Trim leading/trailing whitespace
    if [[ -n $trimmed_file ]]; then      # Filter out empty values
      cleaned_files+=("$trimmed_file")
    fi
  done

  # Join cleaned files with spaces for the command
  cleaned_files_str=$(printf ' %s' "${cleaned_files[@]}")
  cleaned_files_str=${cleaned_files_str:1} # Remove leading space

  # Build the command
  command="$QLTY_CMD coverage publish $cleaned_files_str ${params[@]}"
else
  command="$QLTY_CMD coverage publish ${params[@]}"
fi

# Redact the token value
redacted_command=$(printf "%s\n" "$command" | awk '{
  for (i=1; i<=NF; i++) {
    if ($i == "--token") {
      printf "%s *** ", $i
      i++  # Skip the next field (the actual token value)
    } else {
      printf "%s ", $i
    }
  }
}')

# Print the redacted command
echo "Running: $redacted_command"

# Execute the command
eval "$command"
